from flask import Flask, request, jsonify
import requests
import PyPDF2
import io

app = Flask(__name__)

# Helper function to extract text from a PDF file stream
def extract_text_from_pdf(file_stream):
    pdf_reader = PyPDF2.PdfReader(file_stream)
    text = ""
    for page in pdf_reader.pages:
        page_text = page.extract_text()
        if page_text:
            text += page_text + "\n"
    return text

# Endpoint to generate email content using PDFs and Ollama
@app.route('/generate_email', methods=['POST'])
def generate_email():
    try:
        # Get email details from the form data
        subject = request.form.get('subject', 'No Subject')
        sender = request.form.get('sender', 'noreply@example.com')
        recipient = request.form.get('recipient', 'recipient@example.com')
        
        # Get the uploaded PDF files (field name "pdfs")
        if 'pdfs' not in request.files:
            return jsonify({'error': 'No PDF files in the request'}), 400

        files = request.files.getlist('pdfs')
        extracted_content = ""
        for file in files:
            if file.filename:  # skip empty files
                file_bytes = file.read()
                pdf_file = io.BytesIO(file_bytes)
                extracted_text = extract_text_from_pdf(pdf_file)
                extracted_content += extracted_text + "\n"
        
        if not extracted_content.strip():
            return jsonify({'error': 'No content could be extracted from the PDF(s)'}), 400

        # Construct a prompt that includes the PDF content and email details
        prompt = (
            f"Based on the following document content, generate a professional email. "
            f"Ensure the email is structured with a clear subject line and body. "
            f"Document content:\n\n{extracted_content}\n\n"
            f"Email details:\nSubject: {subject}\nFrom: {sender}\nTo: {recipient}\n\n"
            f"Generate the final email as plain text."
        )

        # Call the local Ollama API (running on localhost at port 11434) using the Deepseek R1 7B model
        ollama_url = "http://localhost:11434/api/generate"
        payload = {
            "model": "deepseek-r1:1.5b",
            "prompt": prompt,
            "max_tokens": 512  # adjust token count as needed
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(ollama_url, json=payload, headers=headers)
        if response.status_code != 200:
            return jsonify({'error': 'Error from Ollama API', 'details': response.text}), 500

        # Assume the generated text is returned under the key 'generated_text'
        gen_result = response.json()
        generated_email = gen_result.get('generated_text', '')
        if not generated_email:
            return jsonify({'error': 'No email content generated by Ollama'}), 500

        # Package the email content to send back (you can also integrate sending to MailHog here)
        result = {
            "subject": subject,
            "from": sender,
            "to": recipient,
            "body": generated_email
        }
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(port=5000, debug=True)
